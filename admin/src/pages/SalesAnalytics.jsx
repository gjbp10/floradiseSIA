"use client"

import axios from "axios"
import { useEffect, useState } from "react"
import { toast } from "react-toastify"
import { backendUrl } from "../App" 

// Helper function for currency formatting
const formatCurrency = (amount) => {
Â  Â  return new Intl.NumberFormat('en-US', {
Â  Â  Â  Â  style: 'currency',
Â  Â  Â  Â  currency: 'USD',
Â  Â  Â  Â  minimumFractionDigits: 2,
Â  Â  }).format(amount);
};

const SalesAnalytics = ({ token }) => {
Â  Â  const [analyticsData, setAnalyticsData] = useState(null);
Â  Â  const [isLoading, setIsLoading] = useState(true);

Â  Â  const fetchAnalytics = async () => {
Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  // ðŸŒŸ DEBUGGING STEP 3: Log the URL to verify it's correct ðŸŒŸ
            console.log("Fetching Analytics from:", backendUrl + "/api/analytics/overview");
            
Â  Â  Â  Â  Â  Â  const response = await axios.get(backendUrl + "/api/analytics/overview", {
Â  Â  Â  Â  Â  Â  Â  Â  headers: { token },
Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  if (response.data.success) {
Â  Â  Â  Â  Â  Â  Â  Â  setAnalyticsData(response.data.data);
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  // Backend returned success: false (e.g., failed DB query, caught server-side)
Â  Â  Â  Â  Â  Â  Â  Â  toast.error("Failed to fetch analytics: " + response.data.message);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  // ðŸŒŸ DEBUGGING STEP 4: Log the full error object for status code (401/500) ðŸŒŸ
Â  Â  Â  Â  Â  Â  console.error("Axios Fetch Error:", error.message, error.response?.status);

            // Give a more informative toast message based on common status codes
            const status = error.response?.status;
            let errorMessage = "Error fetching analytics data.";

            if (status === 401 || status === 403) {
                errorMessage = "Authentication Failed. Please check your admin token.";
            } else if (status === 500) {
                errorMessage = "Server Crash (500). Check backend terminal for specific database error.";
            } else if (status === 404) {
                errorMessage = "API Not Found (404). Check backend route setup.";
            }

Â  Â  Â  Â  Â  Â  toast.error(errorMessage);
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  useEffect(() => {
        // ðŸŒŸ DEBUGGING STEP 1: Check if the token is present before fetching ðŸŒŸ
        if (!token) {
            console.warn("Analytics fetch aborted: Token is null or undefined.");
            setIsLoading(false);
            toast.error("Authentication token required for analytics access.");
            return;
        }

        // ðŸŒŸ DEBUGGING STEP 2: Log the token used (but be careful not to expose it in production logs) ðŸŒŸ
        console.log("Initiating Analytics Fetch with token:", token.substring(0, 10) + '...');
        
Â  Â  Â  Â  fetchAnalytics();
Â  Â  }, [token]);

Â  Â  if (isLoading) {
Â  Â  Â  Â  return <div className="p-4 text-center text-gray-500">Loading Analytics...</div>;
Â  Â  }
Â  Â  
Â  Â  // Fallback if data is null after loading
Â  Â  if (!analyticsData) {
Â  Â  Â  Â  return <div className="p-4 text-center text-red-500">No analytics data available or failed to load.</div>;
Â  Â  }

Â  Â  const { totalRevenue, totalOrders, currentMonthRevenue, totalCustomers, newCustomersThisMonth, topProducts } = analyticsData;

Â  Â  return (
Â  Â  Â  Â  <div className="p-4">
Â  Â  Â  Â  Â  Â  <h1 className="text-3xl font-bold mb-6 text-gray-800">Sales & Analytics Reports ðŸ“Š</h1>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
Â  Â  Â  Â  Â  Â  Â  Â  {/* 1. Total Revenue Card */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-white p-6 rounded-lg shadow-md border-t-4 border-indigo-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500 uppercase">Total Revenue (All Time)</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-extrabold mt-1 text-indigo-700">{formatCurrency(totalRevenue)}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* 2. Monthly Revenue Card */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-white p-6 rounded-lg shadow-md border-t-4 border-green-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500 uppercase">Revenue This Month</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-extrabold mt-1 text-green-700">{formatCurrency(currentMonthRevenue)}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* 3. Total Orders Card */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-white p-6 rounded-lg shadow-md border-t-4 border-yellow-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500 uppercase">Total Orders</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-extrabold mt-1 text-yellow-700">{totalOrders.toLocaleString()}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* --- Product Performance & Customer Insights --- */}
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {/* Product Performance Report */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-white p-6 rounded-lg shadow-md">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold mb-4 border-b pb-2 text-gray-800">Top 5 Product Performance</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {topProducts.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ol className="space-y-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {topProducts.map((product, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={index} className="flex justify-between items-center text-sm border-l-4 border-blue-400 pl-3 py-1 bg-blue-50">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium">{index + 1}. {product.productName || "Unknown Product"}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-bold text-blue-700">{formatCurrency(product.revenue)}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </ol>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500">No product sales recorded yet.</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* Customer Insights Report */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-white p-6 rounded-lg shadow-md">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold mb-4 border-b pb-2 text-gray-800">Customer Insights</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center p-3 border rounded-lg bg-purple-50">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-600 font-medium">Total Registered Customers</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-2xl font-bold text-purple-700">{totalCustomers.toLocaleString()}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center p-3 border rounded-lg bg-pink-50">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-600 font-medium">New Customers (This Month)</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-2xl font-bold text-pink-700">{newCustomersThisMonth.toLocaleString()}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Placeholder for more advanced metrics like CLV or Churn Rate */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="p-3 text-center border rounded-lg border-dashed text-gray-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Need charts for Customer Lifetime Value (CLV) and retention rates.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

export default SalesAnalytics;
