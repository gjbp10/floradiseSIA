import validator from "validator";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import userModel from "../models/userModel.js";

const createToken = (id) => {
Â  return jwt.sign({ id }, process.env.JWT_SECRET);
};

// Route for user login
const loginUser = async (req, res) => {
Â  try {
Â  Â  const { email, password } = req.body;

Â  Â  const user = await userModel.findOne({ email });

Â  Â  if (!user) {
Â  Â  Â  return res.json({ success: false, message: "User doesn't exist" });
Â  Â  }

Â  Â  const isMatch = await bcrypt.compare(password, user.password);

Â  Â  if (isMatch) {
Â  Â  Â  const token = createToken(user._id);
Â  Â  Â  res.json({ success: true, token, role: user.role || 'user' }); // Return role for frontend
Â  Â  } else {
Â  Â  Â  res.json({ success: false, message: "Invalid credentials" });
Â  Â  }
Â  } catch (error) {
Â  Â  console.log(error);
Â  Â  res.json({ success: false, message: error.message });
Â  }
};

// Route for user register
const registerUser = async (req, res) => {
Â  try {
Â  Â  const { firstName, lastName, email, password, address, phone } = req.body;

Â  Â  // checking user already exists or not
Â  Â  const exists = await userModel.findOne({ email });
Â  Â  if (exists) {
Â  Â  Â  return res.json({ success: false, message: "User already exists" });
Â  Â  }

Â  Â  // validating email format & strong password
Â  Â  if (!validator.isEmail(email)) {
Â  Â  Â  return res.json({ success: false, message: "Please enter a valid email" });
Â  Â  }
Â  Â  if (password.length < 8) {
Â  Â  Â  return res.json({ success: false, message: "Please enter a strong password" });
Â  Â  }

Â  Â  // You can add validation for phone number here if needed
Â  Â  if (!validator.isMobilePhone(phone, "any")) {
Â  Â  Â  return res.json({ success: false, message: "Please enter a valid phone number" });
Â  Â  }

Â  Â  // hashing user password
Â  Â  const salt = await bcrypt.genSalt(10);
Â  Â  const hashedPassword = await bcrypt.hash(password, salt);

Â  Â  const newUser = new userModel({
Â  Â  Â  firstName,
Â  Â  Â  lastName,
Â  Â  Â  email,
Â  Â  Â  password: hashedPassword,
Â  Â  Â  address,
Â  Â  Â  phone,
Â  Â  Â  role: 'user', // Explicitly set default role
Â  Â  });

Â  Â  const user = await newUser.save();

Â  Â  const token = createToken(user._id);

Â  Â  res.json({ success: true, token, role: user.role });
Â  } catch (error) {
Â  Â  console.log(error);
Â  Â  res.json({ success: false, message: error.message });
Â  }
};

// ðŸŒŸ FIX: Cleaned up adminLogin. It's now standard and correct. ðŸŒŸ
const adminLogin = async (req, res) => {
Â  try {
Â  Â  const { email, password } = req.body;
Â  Â  const user = await userModel.findOne({ email });

Â  Â  if (!user || user.role !== "admin") {
Â  Â  Â  // Use generic message for security
Â  Â  Â  return res.json({ success: false, message: "Invalid credentials" }); 
Â  Â  }

Â  Â  const isMatch = await bcrypt.compare(password, user.password);

Â  Â  if (isMatch) {
Â  Â  Â  const token = createToken(user._id); 
Â  Â  Â  res.json({ success: true, token, role: user.role }); // Return role
Â  Â  } else {
Â  Â  Â  res.json({ success: false, message: "Invalid credentials" });
Â  Â  }
Â  } catch (error) {
Â  Â  console.log(error);
Â  Â  res.json({ success: false, message: error.message });
Â  }
};

// Route for getting logged-in user profile
const getUserProfile = async (req, res) => {
Â  try {
Â  Â  // req.user is attached by authMiddleware/adminAuth
Â  Â  // FIX: Send the user data to the front end, but explicitly exclude the password.
Â  Â  const userObject = req.user.toObject ? req.user.toObject() : req.user;
Â  Â  delete userObject.password;

Â  Â  res.json({ success: true, user: userObject });
Â  } catch (error) {
Â  Â  console.log(error);
Â  Â  res.status(500).json({ success: false, message: error.message });
Â  }
};

// Route for updating user profile
const updateUserProfile = async (req, res) => {
Â  try {
Â  Â  const { firstName, lastName, email, phone, address } = req.body;

Â  Â  // ðŸŒŸ FIX: Use req.user._id which is set by the auth middleware ðŸŒŸ
Â  Â  const user = await userModel.findById(req.user._id);

Â  Â  if (!user) {
Â  Â  Â  return res.json({ success: false, message: "User not found" });
Â  Â  }

Â  Â  // Update user details
Â  Â  user.firstName = firstName || user.firstName;
Â  Â  user.lastName = lastName || user.lastName;
Â  Â  // Only update email if it hasn't been changed to an existing email (requires extra check)
Â  Â  user.email = email || user.email; 
Â  Â  user.phone = phone || user.phone;
Â  Â  user.address = address || user.address;

Â  Â  await user.save();
Â  Â  // FIX: Re-fetch the user object to send back without the password
Â  Â  const updatedUser = user.toObject();
Â  Â  delete updatedUser.password;
Â  Â  
Â  Â  res.json({ success: true, message: "Profile updated successfully!", user: updatedUser });
Â  } catch (error) {
Â  Â  console.log(error);
Â  Â  res.json({ success: false, message: "Failed to update profile" });
Â  }
};

// Admin Routes for User Management
const addUser = async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const { firstName, lastName, email, password, role } = req.body; 

Â  Â  Â  Â  const existingUser = await userModel.findOne({ email });
Â  Â  Â  Â  if (existingUser) {
Â  Â  Â  Â  Â  Â  return res.status(400).json({ success: false, message: "User with this email already exists" });
Â  Â  Â  Â  }

Â  Â  Â  Â  const salt = await bcrypt.genSalt(10);
Â  Â  Â  Â  const hashedPassword = await bcrypt.hash(password, salt);

Â  Â  Â  Â  const newUser = new userModel({
Â  Â  Â  Â  Â  Â  firstName, 
Â  Â  Â  Â  Â  Â  lastName,
Â  Â  Â  Â  Â  Â  email,
Â  Â  Â  Â  Â  Â  password: hashedPassword,
Â  Â  Â  Â  Â  Â  role: role || 'user',
Â  Â  Â  Â  });

Â  Â  Â  Â  const user = await newUser.save(); // Save the user to get the full object

Â  Â  Â  Â  // ðŸŒŸ MODIFICATION: Create a token for the newly created user ðŸŒŸ
Â  Â  Â  Â  const token = createToken(user._id);

Â  Â  Â  Â  // ðŸŒŸ MODIFICATION: Return the token and role for immediate login ðŸŒŸ
Â  Â  Â  Â  res.json({ 
            success: true, 
            message: "User added successfully",
            token, 
            role: user.role 
        });
Â  Â  } catch (error) {
Â  Â  Â  Â  console.log(error);
Â  Â  Â  Â  res.json({ success: false, message: "Failed to add user" });
Â  Â  }
};

// Fetch all users (admin-only)
const getAllUsers = async (req, res) => {
Â  try {
Â  Â  const users = await userModel.find({}).select('-password'); 
Â  Â  res.json({ success: true, users });
Â  } catch (error) {
Â  Â  console.log(error);
Â  Â  res.json({ success: false, message: "Failed to fetch users" });
Â  }
};

// Update a user (admin-only)
const updateUser = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;
Â  Â  const { firstName, lastName, email, role, suspended } = req.body; 
Â  Â  
Â  Â  const user = await userModel.findById(id);
Â  Â  if (!user) {
Â  Â  Â  return res.status(404).json({ success: false, message: "User not found" });
Â  Â  }

Â  Â  // Update fields
Â  Â  user.firstName = firstName !== undefined ? firstName : user.firstName;
Â  Â  user.lastName = lastName !== undefined ? lastName : user.lastName;
Â  Â  user.email = email !== undefined ? email : user.email;
Â  Â  user.role = role !== undefined ? role : user.role;
Â  Â  user.suspended = suspended !== undefined ? suspended : user.suspended;
Â  Â  
Â  Â  await user.save();

Â  Â  // FIX: Send back the updated user without the password
Â  Â  const updatedUser = user.toObject();
Â  Â  delete updatedUser.password;

Â  Â  res.json({ success: true, message: "User updated successfully", user: updatedUser });
Â  } catch (error) {
Â  Â  console.log(error);
Â  Â  res.json({ success: false, message: "Failed to update user" });
Â  }
};


// Suspend/Unsuspend a user (admin-only)
const toggleSuspendUser = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;
Â  Â  const { suspended } = req.body;

Â  Â  const user = await userModel.findByIdAndUpdate(id, { suspended }, { new: true }).select('-password');

Â  Â  if (!user) {
Â  Â  Â  return res.status(404).json({ success: false, message: "User not found" });
Â  Â  }

Â  Â  res.json({ success: true, message: `User ${suspended ? 'suspended' : 'unsuspended'} successfully`, user });
Â  } catch (error) {
Â  Â  console.log(error);
Â  Â  res.json({ success: false, message: "Failed to update suspension status" });
Â  }
};

// Delete a user (admin-only)
const deleteUser = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;
Â  Â  const result = await userModel.findByIdAndDelete(id);

Â  Â  if (!result) {
Â  Â  Â  return res.status(404).json({ success: false, message: "User not found" });
Â  Â  }

Â  Â  res.json({ success: true, message: "User deleted successfully" });
Â  } catch (error) {
Â  Â  console.log(error);
Â  Â  res.json({ success: false, message: "Failed to delete user" });
Â  }
};

export {
Â  loginUser,
Â  registerUser,
Â  adminLogin,
Â  getUserProfile,
Â  updateUserProfile,
Â  addUser,
Â  getAllUsers,
Â  updateUser,
Â  toggleSuspendUser,
Â  deleteUser,
};
